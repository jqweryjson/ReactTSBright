{"version":3,"sources":["components/Header/Header.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","title","className","backIcon","App","useState","id","name","role","resources","addResource","isShowModal","toggleModal","setName","autoHeight","events","resourceId","desc","startDate","endDate","eventType","eventColor","iconCls","columns","text","field","width","Date","viewPreset","onClick","type","visible","onOk","toString","onCancel","placeholder","onChange","setPersonName","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAOMA,EAAS,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAChB,OACE,gBAAC,IAAD,CACEC,UAAU,SACVC,SAAS,QACTF,MAAOA,KCkGEG,MAtGf,WAAgB,IAAD,EACoBC,mBAAsB,CAAC,CAACC,GAAI,IAAKC,KAAM,SAAUC,KAAM,eAD3E,mBACNC,EADM,KACKC,EADL,OAEsBL,oBAAS,GAF/B,mBAENM,EAFM,KAEOC,EAFP,OAGWP,mBAAS,IAHpB,mBAGNE,EAHM,KAGAM,EAHA,KAcb,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQD,MAAM,2CAEd,kBAAC,IAAD,CACEa,YAAY,EACZC,OAAQ,CACN,CACET,GAAI,EACJU,WAAY,IACZT,KAAM,6BACNU,KAAM,6BACNC,UAAW,mBACXC,QAAS,mBACTC,UAAW,MACXC,WAAY,OACZC,QAAS,sBAEX,CACEhB,GAAI,EACJU,WAAY,IACZT,KAAM,4BACNU,KAAM,4BACNC,UAAW,mBACXC,QAAS,mBACTC,UAAW,MACXC,WAAY,OACZC,QAAS,sBAEX,CACEhB,GAAI,EACJU,WAAY,IACZT,KAAM,0BACNU,KAAM,0BACNC,UAAW,mBACXC,QAAS,mBACTC,UAAW,MACXC,WAAY,OACZC,QAAS,sBAEX,CACEhB,GAAI,EACJU,WAAY,IACZT,KAAM,iBACNU,KAAM,iBACNC,UAAW,mBACXC,QAAS,mBACTC,UAAW,MACXC,WAAY,MACZC,QAAS,sBAEX,CACEhB,GAAI,EACJU,WAAY,IACZT,KAAM,iBACNU,KAAM,iBACNC,UAAW,mBACXC,QAAS,mBACTC,UAAW,MACXC,WAAY,MACZC,QAAS,uBAGbb,UAAWA,EACXc,QAAS,CACP,CAAEC,KAAO,SAAUC,MAAQ,OAAQC,MAAO,MAE5CR,UAAW,IAAIS,KAAK,KAAM,EAAG,IAC7BR,QAAS,IAAIQ,KAAK,KAAM,EAAG,IAC3BC,WAAW,eAGb,kBAAC,IAAD,CAAQC,QAAS,kBAAMjB,GAAaD,IAAcmB,KAAK,WAAvD,cAIA,kBAAC,IAAD,CACE7B,MAAM,iBACN8B,QAASpB,EACTqB,KApFY,WAChBtB,EAAY,GAAD,mBAAKD,GAAL,CAAgB,CAACH,IAAK,IAAIqB,MAAQM,WAAY1B,KAAMA,EAAMC,KAAM,gBAC3EI,GAAaD,IAmFTuB,SAAU,kBAAMtB,GAAaD,KAE7B,kBAAC,IAAD,CAAOwB,YAAY,aAAaC,SAAU,mBA3F1B,SAAC7B,GACrBM,EAAQN,GA0FiE8B,CAA3B,EAAGC,OAAUC,aC5F3CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6f6677e.chunk.js","sourcesContent":["import * as React from 'react';\nimport { PageHeader } from 'antd';\n\ninterface Props {\n  title: string;\n}\n\nconst Header = ({ title }: Props) => {\n  return (\n    <PageHeader\n      className=\"header\"\n      backIcon=\"false\"\n      title={title}\n    />\n  )\n}\n\nexport { Header };","import React, { useState } from 'react';\n\nimport './App.css';\nimport { BryntumScheduler } from 'bryntum-react-shared';\nimport { Modal, Button, Input } from 'antd';\nimport { Iresource } from './types';\nimport { Header } from './components/Header/Header';\n\nfunction App() {\n  const [resources, addResource] = useState<Iresource[]>([{id: 'a', name: 'Kirill', role: 'Developer'}]);\n  const [isShowModal, toggleModal] = useState(false);\n  const [name, setName] = useState('');\n\n  const setPersonName = (name: string) => {\n    setName(name)\n  };\n\n  const addPerson = () => {\n    addResource([...resources, {id: (new Date()).toString(), name: name, role: 'Developer'}])\n    toggleModal(!isShowModal)\n  }\n\n  return (\n    <div className=\"App\">\n      <Header title=\"Job change plan for the next two weeks\" />\n\n      <BryntumScheduler\n        autoHeight={true}\n        events={[\n          {\n            id: 1,\n            resourceId: 'a',\n            name: 'Test work for bright-group',\n            desc: 'Test work for bright-group',\n            startDate: '2020-10-19 11:00',\n            endDate: '2020-10-21 14:00',\n            eventType: 'Job',\n            eventColor: 'blue',\n            iconCls: 'b-fa b-fa-calendar'\n          },\n          {\n            id: 2,\n            resourceId: 'a',\n            name: 'Main tasks at current Job',\n            desc: 'Main tasks at current Job',\n            startDate: '2020-10-21 11:00',\n            endDate: '2020-10-22 14:00',\n            eventType: 'Job',\n            eventColor: 'blue',\n            iconCls: 'b-fa b-fa-calendar'\n          },\n          {\n            id: 3,\n            resourceId: 'a',\n            name: 'going to the tax office',\n            desc: 'going to the tax office',\n            startDate: '2020-10-22 08:00',\n            endDate: '2020-10-22 20:00',\n            eventType: 'Job',\n            eventColor: 'blue',\n            iconCls: 'b-fa b-fa-calendar'\n          },\n          {\n            id: 4,\n            resourceId: 'a',\n            name: 'Some interview',\n            desc: 'Some interview',\n            startDate: '2020-10-26 11:00',\n            endDate: '2020-10-28 14:00',\n            eventType: 'Job',\n            eventColor: 'red',\n            iconCls: 'b-fa b-fa-calendar'\n          },\n          {\n            id: 5,\n            resourceId: 'a',\n            name: 'Some interview',\n            desc: 'Some interview',\n            startDate: '2020-10-25 11:00',\n            endDate: '2020-10-26 14:00',\n            eventType: 'Job',\n            eventColor: 'red',\n            iconCls: 'b-fa b-fa-calendar'\n          },\n        ]}\n        resources={resources}\n        columns={[\n          { text : 'Person', field : 'name', width: 100 },\n        ]}\n        startDate={new Date(2020, 9, 19)}\n        endDate={new Date(2020, 9, 30)}\n        viewPreset='dayAndWeek'\n      />\n\n      <Button onClick={() => toggleModal(!isShowModal)} type=\"primary\">\n        Add person\n      </Button>\n\n      <Modal\n        title=\"Add new Person\"\n        visible={isShowModal}\n        onOk={addPerson}\n        onCancel={() => toggleModal(!isShowModal)}\n      >\n        <Input placeholder=\"Enter name\" onChange={({ target: { value } }) => setPersonName(value)} />\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}